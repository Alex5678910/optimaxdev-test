{"version":3,"sources":["types/index.ts","hooks/useTypeSelector.ts","store/action-creators/cart.ts","components/MenuList.tsx","components/FormItem.tsx","App.tsx","reportWebVitals.ts","store/redusers/rootReducer.ts","store/redusers/index.ts","store/index.ts","index.tsx"],"names":["ActionTypes","useTypedSelector","useSelector","MenuList","state","menu","loading","error","dispatch","useDispatch","useEffect","a","type","FETCH_MENU","fetch","headers","then","res","json","db","FETCH_MENU_SUCCESS","payload","FETCH_MENU_ERROR","className","length","map","e","index","title","onClick","n","PLUS_ITEM","id","quantity","find","MINUS_ITEM","price","REMOVE_ITEM","FormItem","useState","setTitle","setQuantity","setPrice","inputRef","useRef","onSubmit","preventDefault","ADD_CART","Date","current","focus","ref","placeholder","value","onChange","event","target","slice","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","filter","el","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c5e954f.chunk.js","sourcesContent":["export interface MenuState {\r\n    menu: any[];\r\n    loading: boolean;\r\n    error: null | string;\r\n}\r\n\r\nexport enum ActionTypes {\r\n    FETCH_MENU = 'FETCH_MENU',\r\n    FETCH_MENU_SUCCESS = 'FETCH_MENU_SUCCESS',\r\n    FETCH_MENU_ERROR = 'FETCH_MENU_ERROR',\r\n    REMOVE_ITEM = 'REMOVE_ITEM',\r\n    PLUS_ITEM = 'PLUS_ITEM',\r\n    MINUS_ITEM='MINUS_ITEM',\r\n    ADD_CART='ADD_CART'\r\n}\r\n\r\ninterface FetchMenuAction {\r\n    type: ActionTypes.FETCH_MENU\r\n}\r\n\r\ninterface FetchMenuSuccessAction {\r\n    type: ActionTypes.FETCH_MENU_SUCCESS;\r\n    payload: any[]\r\n}\r\n\r\ninterface addCart {\r\n    type: ActionTypes.ADD_CART;\r\n    payload: {}\r\n}\r\n\r\ninterface FetchMenuErrorAction {\r\n    type: ActionTypes.FETCH_MENU_ERROR;\r\n    payload: string\r\n}\r\n\r\ninterface RemoveItem {\r\n    type: ActionTypes.REMOVE_ITEM;\r\n    payload: number;\r\n}\r\n\r\ninterface plusItem {\r\n    type: ActionTypes.PLUS_ITEM;\r\n    payload: number;\r\n}\r\n\r\ninterface minusItem {\r\n    type: ActionTypes.MINUS_ITEM;\r\n    payload: number;\r\n}\r\n\r\nexport type MenuAction = FetchMenuErrorAction |\r\n    FetchMenuSuccessAction |\r\n    FetchMenuAction |\r\n    RemoveItem |\r\n    plusItem |\r\n    minusItem |\r\n    addCart","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/redusers\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import {MenuAction, ActionTypes} from \"../../types\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const fetchMenu = () => {\r\n    return async (dispatch: Dispatch<MenuAction>) => {\r\n        try {\r\n            dispatch({type: ActionTypes.FETCH_MENU})\r\n            const db = await fetch('http://localhost:3001/menu', {\r\n                headers: { 'Content-Type': 'application/json' }\r\n            }).then(res => res.json());\r\n            dispatch({type: ActionTypes.FETCH_MENU_SUCCESS, payload: db,})\r\n        }catch (e) {\r\n            dispatch({type: ActionTypes.FETCH_MENU_ERROR, payload: 'Произошла ошибка, проверьте сервер!'})\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {useTypedSelector} from \"../hooks/useTypeSelector\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchMenu} from \"../store/action-creators/cart\";\r\nimport {ActionTypes} from \"../types\";\r\n\r\nconst MenuList: React.FC = () => {\r\n    const {loading, error, menu} = useTypedSelector(state => state.menu)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchMenu())\r\n    }, [dispatch])\r\n\r\n    if (loading) {\r\n        return <h1>Loading....</h1>\r\n    }\r\n\r\n    if (error) {\r\n        return <h1>{error}</h1>\r\n    }\r\n\r\n    const removeHandler = (n: { id: number }) => {\r\n        dispatch({type: ActionTypes.REMOVE_ITEM, payload: n.id})\r\n    }\r\n\r\n    const plusHandler = (n: { id: number }) => {\r\n        dispatch({type: ActionTypes.PLUS_ITEM, payload: n.id})\r\n    }\r\n\r\n    const minusHandler = (n: { id: number, quantity: number }) => {\r\n        const min = menu.find(e => {\r\n            return e.quantity === n.quantity\r\n        })\r\n        if (min.quantity > 0) {\r\n            dispatch({type: ActionTypes.MINUS_ITEM, payload: n.id})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <table className={'Table'}>\r\n                <thead className={'Thead'}>\r\n                <tr>\r\n                    <th className={'Box-title'}>Name product</th>\r\n                    <th className={'Box-title'}>Quantity</th>\r\n                    <th className={'Box-title'}>Price</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {menu.length > 0 ?\r\n                    menu.map((e, index) => {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td className={'Title-td'}>{e.title}</td>\r\n                                <td><span className={'Increase'} onClick={() => plusHandler(e)}>\r\n                            +</span><span>{e.quantity}</span><span className={'Decrease'}\r\n                                                                                          onClick={() => minusHandler(e)}>\r\n                            -</span></td>\r\n                                <td>{e.price}</td>\r\n                                <td>\r\n                                    <button className={'Del'} onClick={() => removeHandler(e)}>Del</button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    }) : <tr className={'Quantity'}><td>NO PRODUCT</td></tr>\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MenuList;","import React, {useRef, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ActionTypes} from \"../types\";\r\n\r\nconst FormItem: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const [title, setTitle] = useState<string>('')\r\n    const [quantity, setQuantity] = useState<number>(1)\r\n    const [price, setPrice] = useState<number>(1)\r\n    const inputRef = useRef() as React.MutableRefObject<HTMLInputElement>\r\n\r\n    const handleInput1 = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.target.value.slice(0, 15))\r\n    }\r\n    const handleInput2 = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setQuantity(+event.target.value.slice(0, 5))\r\n    }\r\n    const handleInput3 = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setPrice(+event.target.value.slice(0, 5))\r\n    }\r\n\r\n    const addCart = (e: React.SyntheticEvent) => {\r\n        e.preventDefault()\r\n        if (title && price && quantity) {\r\n            dispatch({\r\n                type: ActionTypes.ADD_CART,\r\n                payload: {\r\n                    title,\r\n                    price,\r\n                    quantity,\r\n                    id: new Date()\r\n                }\r\n            })\r\n        }\r\n        if(title === ''){\r\n            inputRef.current.focus()\r\n            setQuantity(quantity)\r\n            setPrice(price)\r\n        }\r\n        if(title !== ''){\r\n            setTitle('')\r\n            setQuantity(1)\r\n            setPrice(1)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={addCart}>\r\n            <button type=\"submit\">Send to cart</button>\r\n            <label>\r\n                <input\r\n                    ref={inputRef}\r\n                    placeholder={'Name of product'}\r\n                    type=\"text\"\r\n                    value={title}\r\n                    onChange={handleInput1}\r\n                />\r\n                Name product\r\n            </label>\r\n            <label>\r\n                <input\r\n                    placeholder={'Quantity of product'}\r\n                    type=\"number\"\r\n                    value={quantity}\r\n                    onChange={handleInput2}\r\n                />\r\n                Quantity\r\n            </label>\r\n            <label>\r\n                <input\r\n                    placeholder={'Price of product'}\r\n                    type=\"number\"\r\n                    value={price}\r\n                    onChange={handleInput3}\r\n                />\r\n                Price\r\n            </label>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default FormItem;\r\n","import React from 'react';\nimport MenuList from \"./components/MenuList\";\nimport FormItem from \"./components/FormItem\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <FormItem/>\n            <MenuList/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {MenuAction, ActionTypes, MenuState} from \"../../types\";\r\n\r\nconst initialState: MenuState = {\r\n    menu: [],\r\n    loading: false,\r\n    error: null,\r\n}\r\n\r\nexport const reducer = (state = initialState, action: MenuAction): MenuState => {\r\n    switch (action.type) {\r\n        case ActionTypes.FETCH_MENU:\r\n            return {\r\n                loading: true,\r\n                error: null,\r\n                menu: []\r\n            }\r\n        case ActionTypes.FETCH_MENU_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                error: null,\r\n                menu: action.payload\r\n            }\r\n        case ActionTypes.FETCH_MENU_ERROR:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n                menu: []\r\n            }\r\n        case  ActionTypes.REMOVE_ITEM:\r\n            return {\r\n                ...state, menu: state.menu.filter(({ id }) => id !== action.payload)\r\n            }\r\n        case  ActionTypes.PLUS_ITEM:\r\n            return {\r\n                ...state, menu: state.menu.map(el => el.id === action.payload ? { ...el, quantity: el.quantity + 1} : el)\r\n            }\r\n        case  ActionTypes.MINUS_ITEM:\r\n            return {\r\n                ...state, menu: state.menu.map(el => el.id === action.payload ? { ...el, quantity: el.quantity - 1} : el)\r\n            }\r\n        case  ActionTypes.ADD_CART:\r\n            return {\r\n                ...state, menu: [action.payload, ...state.menu]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport {reducer} from \"./rootReducer\"\r\n\r\nexport const rootReducer = combineReducers({\r\n    menu: reducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import {applyMiddleware, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {rootReducer} from \"./redusers\";\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}